package com.reason.lang.rescript;

import com.intellij.psi.PsiElement;
import com.intellij.psi.util.PsiTreeUtil;
import com.reason.lang.core.psi.impl.PsiLocalOpen;

@SuppressWarnings("ConstantConditions")
public class LocalOpenTest extends ResParsingTestCase {
  public void test_localParen() {
    PsiElement expression = parseCode("ModA.ModB.(call())");
    PsiLocalOpen o = PsiTreeUtil.findChildOfType(expression, PsiLocalOpen.class);
    assertEquals("(call())", o.getText());
  }

  public void test_localParen_2() {
    PsiElement expression = parseCode("let x = Js.Promise.(Api.call())");
    PsiLocalOpen o = PsiTreeUtil.findChildOfType(expression, PsiLocalOpen.class);
    assertEquals("(Api.call())", o.getText());
  }

  public void test_localArray() {
    PsiElement expression = parseCode("ModA.ModB.[call()]");
    PsiLocalOpen o = PsiTreeUtil.findChildOfType(expression, PsiLocalOpen.class);
    assertEquals("[call()]", o.getText());
  }

  public void test_localArray_2() {
    PsiElement expression = parseCode("let x = ModA.ModB.[call()]");
    PsiLocalOpen o = PsiTreeUtil.findChildOfType(expression, PsiLocalOpen.class);
    assertEquals("[call()]", o.getText());
  }

  public void test_notLocal() {
    PsiElement expression = firstElement(parseCode("Js.log(\"nok\")"));
    assertFalse(expression instanceof PsiLocalOpen);
  }
}
